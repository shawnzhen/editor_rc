" 问题：
" (1) 用LeaderF来显示函数列表？取代tagbar？
" (2) 如何查找一个函数的引用位置？
" (3) 如何分组管理插件？

" 不加载配置文件启动vim
" vim -u NONE -N

" Install the necessary packages
" Ubuntu/debian
" sudo apt install silversearcher-ag
" sudo apt install fonts-powerline
" sudo apt install doxygen
" sudo apt install global 
" mkdir ~/.vimr/.undo
" mkdir ~/.vim/.backup

" colorscheme
" term 黑白终端的属性
" cterm 彩色终端的属性
" ctermfg 彩色终端的前景色
" ctermbg 彩色终端背景色
" gui GUI属性
" guifg GUI前景色
" guibg GUI背景色

"
" DoxygenToolkit基本用法
" 函数注释 :Dox
" 文件头 :DoxAuthor
" 添加版权 :DoxLic

" Ctrl-]直接在当前窗口跳转到定义
" Ctrl-W]用新窗口打开并查看光标下符号的定义
" Ctrl-W}使用preview窗口预览光标下符号的定义
" Ctrl-o退回
" Ctrl-i返回

" quickfix是vim内置的插件，用于浏览命令执行结果信息。
" :cc
" :cp 跳到上一个错误
" :cn 跳到下一个错误
" :cl 列出所有的错误
" :cw 如果有错误列表，则打开
" :copen [line count]打开
" :cclose 关闭
" :cnew 到后一个新列表
" :cold[er] 到前一个旧列表

" vimdiff命令
" ========
" 跳转到下一个diff点：]c
" 跳转到上一个diff点：[c
" 两个文件间切换：ctrl+w
" 将当前文件的差异内容复制到另一个文件里：dp
" 将另一个文件的内容复制到当前文件里：do
" 刷新文件：diffupdate
" 打开折叠代码：zo
" 重新折叠代码：zc

" YCM
" ========
" -- NOT using libclang, no semantic completion for C/C++/ObjC will be available
" -- NOT using clang-tidy for static analysis.


" YCM_generator
" ============
" Run ./config_gen.py PROJECT_DIRECTORY

" 文件搜索工具
" ========
" ag命令可用于搜索文件
" sudo apt-get install silversearcher-ag
" Ripgrep也是一款不错的搜索工具，用Rust编写.

" 模糊查找工具
" ========
" FZF和LeaderF

" sort命令
" ========
" 排序头文件
" :1,4sort 按字典序排序头文件

" vim插件的安装位置
" :set runtimepath?

" 窗口间跳转
" ==========
" CTRL+W +[H,J,K,L]

" Basic operations
" ================
" tab标签页
" --------
" 帮助文档 help tab-page-intro
" :tabnew 新建标签页
" :tabs 显示已打开标签页的列表
" :tabc 关闭当前标签页
" :tabn 移动到下一个标签页
" :tabp 移动到上一个标签页
" :tabfirst 移动到第一个标签页
" :tablast 移动到最后一个标签页
" :gt打开下一个标签页
" :gT上一个
" :tabo[nly]仅保留当前tab
" :tabc[lose]关闭当前标签
" :tabfir[st]打开第一个标签页


" --------
" 选中光标所在行：V
" 选中全部文本：ggVG
" 向下翻一页C-f，向上翻一页C-b
" 向上翻半屏C-u，向下翻半屏C-d
" 删除光标所在单词：daw

" --------
" 跳转到局部变量的定义处：gD

" ====Key Mapping====
" Key prefix: C-X or C-M
" map -> Normal Mode, Visual Mode, Operator Pending
" nmap-> Normal Mode
" vmap-> Visual Mode
" omap-> Operator Pending
" map!-> Insert Mode, Command Line
" imap-> Insert Mode
" cmap-> Command Line

" vim的<leader>键是'\'

" ====tagbar====
" <CR>          跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样
" o             在一个新打开的窗口中显示光标下tag
" <Space>       显示光标下tag的原型定义
" u             更新taglist窗口中的tag
" s             更改排序方式，在按名字排序和按出现顺序排序间切换
" x             taglist窗口放大和缩小，方便查看较长的tag
" +             打开一个折叠，同zo
" -             将tag折叠起来，同zc
" *             打开所有的折叠，同zR
" =             将所有tag折叠起来，同zM
" [[            跳到前一个文件
" ]]            跳到后一个文件
" q             关闭taglist窗口
" <F1>          显示帮助 

" 查看GCC的搜索目录：（gcc --help）
" 查看编译c++文件使用的头文件目录的命令为：`gcc -print-prog-name=cc1plus` -v
" 查看编译c文件的头文件搜索目录的命令为 `gcc -print-prog-name=cc1` -v

" Set the path for the 'find' command. And 'gf' command can be used.
" #include <...> search directories:
set path+=/usr/local/include
set path+=/usr/include

" C++ header
set path+=/usr/include/x86_64-linux-gnu/c++/8
set path+=/usr/include/c++/8
set path+=/usr/lib/gcc/x86_64-linux-gnu/8/include
set path+=/usr/lib/gcc/x86_64-linux-gnu/8/include-fixed
set path+=/usr/include/c++/8/backward

" C header
set path+=/usr/lib/gcc/x86_64-linux-gnu/8/include
set path+=/usr/lib/gcc/x86_64-linux-gnu/8/include-fixed

" Basic setting
colorscheme evening
set nocompatible

" modify the <leader>
" let mapleader=","

set mouse=v

syntax on
set number         " show line number
set confirm        " pop hint
set autoread       " check outside change
set showmatch      " show match, [] {}
set foldenable
set showcmd
set cmdheight=1
set autoindent
set smartindent

" Configure the cursor
" TODO

" Configure the cursor line
" NOTE:  evening.vim colorscheme uses 'underline'
set cursorline    " highlight current line
highlight CursorLine cterm=bold ctermbg=237 ctermfg=NONE guibg=NONE guifg=NONE 

hi Visual term=reverse cterm=reverse guibg=Grey

"autocmd InsertEnter * se cul
"autocmd InsertLeave * se nocul

set cursorcolumn  " highlight current colum
"highlight ColorColumn ctermbg=235 guibg=#2c2d27

set colorcolumn=80

set ruler

" Allow backspacing
set backspace=indent,eol,start

" Highlight the search result
":nohl cancel highlight
set incsearch
set hlsearch

" Configure the GUI
if has('gui_running')
    map <C-X><C-S> :browse confirm w<CR>
endif

" Tabs
map <C-X><C-T> :tabnew <CR>
map <C-X><C-N> :tabn <CR>
map <C-X><C-P> :tabp <CR>

" 格式化
map <F12> gg=G

" Tab is shown as '^I' when run ':set list'.
" If you want to see more key notations, you can type ':help tab'.
set noexpandtab
"set listchars=tab:>-,space:. "<Tab> will be shown as '>--------',Spaces will be shown as '.' 

set tabstop=4     " <Tab> width
set softtabstop=4 " If you type <Tab> in insert mode, it will insert (softtabstop/tabstop) <Tab>s.
set shiftwidth=4  " 决定缩进量
set expandtab     " Use the appropriate number of spaces to insert a <Tab>.

" Set the four encodings
set encoding=utf-8     " buffer
set fileencoding=utf-8 " edit file
" Try those encodings when open an exist file
set fileencodings=ucs-bom,utf-8,cp936,latin1 
set termencoding=utf-8 "terminal

set ff=unix "file plantform

"filetype plugin indent on "This command is short for the three commands below 
filetype on        "Enable file type detection(by file name or the contents)
filetype plugin on "Enable loading the plugin files for specific file types
filetype indent on "Enable loading the indent file for specific file type

"set noswapfile
"set noundofile
"set nobackup

set undofile

let s:undodir = expand('~/.vim/.undo')
if !isdirectory(s:undodir)
   silent! call mkdir(s:undodir, 'p')
endif

set undodir=s:undodir
set backupdir=$HOME/.vim/.backup

"打开文件后光标处于上次退出的位置
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" set up gui
if has("gui_running")
    au GUIEnter * simalt ~x " max window
    set guioptions-=m " menu bar
    set guioptions-=T " tools bar
    set guioptions-=L
    set guioptions-=r
    set guioptions-=b
    set showtabline=0
    set guifont=courier_new:h16:b:cDEFAULT
endif

" Plugin manager: vim-plug 支持延迟加载
" :PlugInstall
" :PlugClean
" :PlugUpgrade
call plug#begin('~/.vim/plugged')
Plug 'preservim/nerdtree' ", { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar'
Plug 'Valloric/YouCompleteMe'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'dense-analysis/ale'
Plug 'brookhong/cscope.vim'
Plug 'tpope/vim-fugitive'
Plug 'Lokaltog/vim-powerline' 
"Plug 'powerline/powerline'
Plug 'rust-lang/rust.vim'
Plug 'rdnetto/YCM-Generator'
Plug 'tamlok/a.vim'
Plug 'SirVer/ultisnips'
Plug 'preservim/nerdcommenter'
Plug 'luochen1990/rainbow'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'vim-scripts/gtags.vim'
"Plug 'ludovicchabant/vim-gutentags'
Plug 'rking/ag.vim'
Plug 'christoomey/vim-tmux-navigator'

" text object
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'MattesGroeger/vim-bookmarks'
call plug#end()

" ============A============"
" a.vim[https://www.vim.org/scripts/script.php?script_id=31]
" A在新的buffer中切换到c/h文件
" AS横向分割窗口，并打开c/h文件
" AV纵向分割窗口并打开c/h文件
" AT新建一个标签页并打开对应的c/h文件
" 切换标签页：gt/gT
let g:alternateSearchPath='sfr:../source,sfr:../src,sfr:../include,sfr:../inc'

" ========You Complete Me========"
let g:ycm_min_num_identifier_candidate_chars = 3
let g:ycm_key_invoke_completion = '<c-z>'
let g:ycm_confirm_extra_conf = 0    " 0: No inquiry
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' 
"let g:ycm_server_log_level = 'debug'

let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1

"Disable ycm syntastic, because we want to use ALE later
":YcmDiags see errors or warnings detected in your file
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_error_symbol = 'e'
let g:ycm_warning_symbol = 'w'

" 关闭预览窗口
set completeopt=menu

"=========ALE========"
" Asynchronous Lint Engine
"compile_commands.json 
let g:ale_sig_colum_always = 0
let g:ale_set_highlights = 1

let g:ale_sign_error = 'E'
let g:ale_sign_warning = 'W'

let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
" Lint manually, :ALELint
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {'c':['clang'],'c++':['clang']}

" ========Nerd tree========"
" r刷新目录
let NERDTreeWinPos='left'
let NERDTreeWinSize=30
"不显示项目树上额外的信息，例如帮助、提示等
let NERDTreeMinimalUI=1
let NERDTreeIgnore=['\.pyc$', '\~$', 'node_modules'] "ignore files in NERDTree
"不显示隐藏的文件
let g:NERDTreeHidden=0

map <leader>nt :NERDTreeToggle<CR>
"当不带参数打开Vim时自动加载项目树
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"当所有文件关闭时关闭项目树窗格
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ========Git========"
set statusline+=%{fugitive#statusline()} "git hotness

" ========Status bar========"
"set rtp+=/usr/lib/python3/dist-packages/powerline/bindings/vim
set laststatus=2 "always display the status line
set t_Co=256

" ========ctags========"
" 推荐使用universal Ctags
" ctags的基本用法
" :!ctags -R生成tag文件
" ctrl + ] jump to the defination
" ctrl + o jump back
" 缺点：修改代码后需要重新生成tags

" ========tagbar========"
" tagbar是taglist的替代品,比taglist更适合C++使用，支持按类折叠
nmap <leader>tb :TagbarToggle<CR>
if has('unix')
    let g:tagbar_ctags_bin='/usr/local/bin/ctags'
elseif has('win32') || has('win64')
    let g:tagbar_ctags_bin='$VIM\tools\ctags58\ctags.exe'
endif

let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_autofocus = 0 " 打开tagbar后，光标在tagbar页面
let g:tagbar_sort = 1
let g:tagbar_autopreview = 0
let g:tagbar_show_data_type = 1
let g:tagbar_show_visibility = 1 " 默认是1，显示符号的可见性

" 不显示help信息
let g:tagbar_compact = 1

" 自动打开tagbar
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()

" Usage:
" <CR>: 回车跳到定义位置
" p: 跳到定义位置，但光标仍然在tagbar原位置
" P: 打开一个预览窗口显示标签内容
" <space>: 底行显示标签原型
" + 展开标签内容
" - 折叠标签内容
" * 展开所有标签
" = 折叠所有标签
" o在展开与折叠间切换
" s：切换排序
" x：展开/缩小标签栏
" q: 关闭tagbar

" How to use cscope
" :cs show
" 命令需要设定才能把执行结果显示到quickfix中。
set cscopequickfix=s-,d-,i-,t-,e-

" 使用gtags-scope代替cscope
set cscopetag
set cscopeprg='gtags-cscope' 

let GtagsCscope_Auto_Load = 1
let CtagsCscope_Auto_Map = 1
let GtagsCscope_Quiet = 1
let gtags_file=findfile("GTAGS", ";") "查找gtags文件

if !empty(gtags_file)
   exe "cs add" gtags_file
endif


" ========gtags=======
" https://www.gnu.org/software/global/


" ========vim rust========"
let g:rustfmt_autosave = 1


" ========LeaderF========"
" An effective fuzzy finder that helps to locate files, buffers, mrus, gtags,etc.
" :Leaderf -h
" :Leaderf file <CR>
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1

" ========fzf========"
"nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>
"nnoremap <silent> <c-p> :Files <CR>

" ========nerd commenter========"

" Usage:
" <leader>cc 注释当前行
" <leader>cu 取消注释

" ========rust========"
" :rustfmt
let g:rustfmt_autosave = 1 " automatic run rustfmt

" ========Rainbow========
" Enable the rainbow
let g:rainbow_active = 1

" ========Doxygen toolkit========
let g:DoxygenToolkit_briefTag_pre="@brief "
let g:DoxygenToolkit_paramTag_pre="@param "
let g:DoxygenToolkit_returnTag="@returns   "
"let g:DoxygenToolkit_blockHeader="--"
"let g:DoxygenToolkit_blockFooter="--"
let g:DoxygenToolkit_authorName="zhenshuo"

let g:DoxygenToolkit_briefTag_funcName="no" 
let g:doxygen_enhanced_color=1 
"let g:DoxygenToolkit_commentType="C++" 
let g:DoxygenToolkit_classTag = "@class " 

"let g:DoxygenToolkit_licenseTag=""   <-- !!! Does not end with "\<enter>"


"
" ========gutentags========
"
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif


"
" ========LeaderF========
"
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<cr>
noremap <m-p> :LeaderfFunction!<cr>
noremap <m-n> :LeaderfBuffer<cr>
noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
"let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}

" ========bookmark========
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=237 ctermfg=NONE
let g:bookmark_sign = '♥'
let g:bookmark_annotation_sign ='='
let g:bookmark_auto_save = 1
let g:bookmark_highlight_lines = 1
"let g:bookmark_location_list = 1

" Usage
" --------
" mm: Add/remove bookmark at current line
" mi: Add/edit/remove annotation at current line
" mn: Jump to next bookmark in buffer
" mp: Jump to previous bookmark in buffer
" ma: Show all bookmarks (toggle)
" mc: Clear bookmarks in current buffer only
" mx: Clear bookmarks in all buffers
" [count]mkk: Move up bookmark at current line
" [count]mjj: Move down bookmark at current line
" [count]mg: Move bookmark at current line to another line

"source $VIMRUNTIME/mswin.vim
"behave mswin
